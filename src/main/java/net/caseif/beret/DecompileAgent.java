/*
 * New BSD License (BSD-new)
 *
 * Copyright (c) 2015 Maxim Roncacé
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     - Neither the name of the copyright holder nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.caseif.beret;

import static net.caseif.beret.Util.setTabSize;
import static net.caseif.beret.Util.tab;

import net.caseif.beret.structures.AttributeStructure;
import net.caseif.beret.wrapper.ClassInfo;
import net.caseif.beret.wrapper.FieldInfo;
import net.caseif.beret.wrapper.MethodInfo;
import net.caseif.beret.wrapper.synthetic.AccessFlag;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

/**
 * Agent for handling decompilation of raw class data to Java code.
 *
 * @author Max Roncacé
 */
public class DecompileAgent {

    private ClassInfo handle;

    private Set<String> imports = new HashSet<>();

    /**
     * Consructs a new {@link DecompileAgent} from the given {@link ClassInfo}.
     *
     * @param classInfo The handle for the new {@link DecompileAgent}
     */
    public DecompileAgent(ClassInfo classInfo) {
        this.handle = classInfo;
    }

    /**
     * Prints a representation of this {@link DecompileAgent}'s class in Java
     * code.
     *
     * @return A String containing the decompiled code
     */
    public String decompile() {
        setTabSize(4);
        StringBuilder sb = new StringBuilder();
        sb.append(getClassSignature()).append("\n\n");
        for (String s : getFieldSignatures()) {
            sb.append(tab(1)).append(s).append('\n');
        }
        if (handle.getFields().length > 0) {
            sb.append('\n');
        }
        MethodInfo[] methods = handle.getMethods();
        String[] methodSigs = getMethodSignatures();
        for (int i = 0; i < methods.length; i++) {
            sb.append(tab(1)).append(methodSigs[i]);
            if (methods[i].getAccess().getFlags().contains(AccessFlag.MethodFlag.ACC_ABSTRACT)) {
                sb.append(';');
            } else {
                sb.append(" {").append("\n");
                String[] body = BytecodeAgent.decompile(methods[i]);
                for (String line : body) {
                    sb.append(tab(2)).append(line).append('\n');
                }
                sb.append(tab(1)).append("}");
            }
            sb.append("\n\n");
        }
        sb.append("}");
        sb.append("\n");

        if (imports.size() > 0) {
            sb.insert(0, '\n');
        }
        for (String s : imports) {
            sb.insert(0, '\n');
            sb.insert(0, ";");
            sb.insert(0, s);
            sb.insert(0, "import ");
        }

        if (!handle.getPackage().isEmpty()) {
            sb.insert(0, ";\n\n");
            sb.insert(0, handle.getPackage());
            sb.insert(0, "package ");
        }

        AttributeStructure source = Util.getAttrFromName(handle.getAttributes(), "SourceFile");
        sb.insert(0, '\n').insert(0, " (class version "
                + handle.getMajorVersion() + "." + handle.getMinorVersion() + ")");
        if (source != null) {
            sb.insert(0, "// compiled from source file \""
                    + handle.getStringFromPool(Util.bytesToUshort(source.getInfo())) + "\"");
        } else {
            sb.insert(0, "\n").insert(0, "// compiled from unknown source file");
        }

        sb.insert(0, "\n").insert(0, "// generated by Beret <https://github.com/caseif/Beret>");
        return sb.toString();
    }

    public String getClassSignature() {
        StringBuilder sb = new StringBuilder();
        boolean isInterface = handle.getAccessModifiers().getFlags().contains(AccessFlag.ClassFlag.ACC_INTERFACE);
        for (AccessFlag.ClassFlag flag : AccessFlag.ClassFlag.values()) {
            if (isInterface && flag == AccessFlag.ClassFlag.ACC_ABSTRACT) { // it's redundant
                continue;
            }
            if (flag.isPresentInSource() && handle.getAccessModifiers().getFlags().contains(flag)) {
                sb.append(flag.toString()).append(" ");
            }
        }
        if (!handle.getAccessModifiers().getFlags().contains(AccessFlag.ClassFlag.ACC_ENUM)
                && !handle.getAccessModifiers().getFlags().contains(AccessFlag.ClassFlag.ACC_INTERFACE)) {
            sb.append("class ");
        }
        sb.append(handle.getBaseName()).append(" {");
        return sb.toString();
    }

    public String[] getFieldSignatures() {
        String[] array = new String[handle.getFields().length];
        int i = 0;
        for (FieldInfo f : handle.getFields()) {
            if (f.getDescriptor().getRequiredImport() != null) {
                imports.add(f.getDescriptor().getRequiredImport());
            }
            StringBuilder sb = new StringBuilder();
            for (AccessFlag.FieldFlag flag : AccessFlag.FieldFlag.values()) {
                if (flag.isPresentInSource() && f.getAccess().getFlags().contains(flag)) {
                    sb.append(flag.toString()).append(" ");
                }
            }
            sb.append(f.getDescriptor()).append(" ");
            sb.append(f.getName()).append(";");
            array[i] = sb.toString();
            ++i;
        }
        return array;
    }

    public String[] getMethodSignatures() {
        String[] array = new String[handle.getMethods().length];
        int i = 0;
        for (MethodInfo m : handle.getMethods()) {
            if (m.getName().equals("<clinit>")) { // static initializer
                array[i] = "static";
                ++i;
                continue;
            }
            for (TypeDescriptor p : m.getParams()) {
                if (p.getRequiredImport() != null) {
                    imports.add(p.getRequiredImport());
                }
            }
            if (m.getReturnType().getRequiredImport() != null) {
                imports.add(m.getReturnType().getRequiredImport());
            }
            StringBuilder sb = new StringBuilder();
            boolean isInterface =
                    m.getParent().getAccessModifiers().getFlags().contains(AccessFlag.ClassFlag.ACC_INTERFACE);
            boolean isEnum =
                    m.getParent().getAccessModifiers().getFlags().contains(AccessFlag.ClassFlag.ACC_ENUM);
            for (AccessFlag.MethodFlag flag : AccessFlag.MethodFlag.values()) {
                if (isInterface
                        && (flag == AccessFlag.MethodFlag.ACC_ABSTRACT || flag == AccessFlag.MethodFlag.ACC_PUBLIC)) {
                    continue; // redundant
                }
                if (isEnum && flag == AccessFlag.MethodFlag.ACC_PRIVATE) {
                    continue; // redundant
                }
                if (flag.isPresentInSource() && m.getAccess().getFlags().contains(flag)) {
                    sb.append(flag.toString()).append(" ");
                }
            }
            if (!m.getName().equals("<init>")) {
                sb.append(m.getReturnType()).append(" ");
                sb.append(m.getName()).append("(");
            } else {
                sb.append(m.getParent().getBaseName()).append("(");
            }
            HashMap<String, Integer> descCounts = new HashMap<>();
            for (int d = 0; d < m.getParams().length; d++) {
                TypeDescriptor p = m.getParams()[d];
                sb.append(p).append(" ");
                String friendlyName = p.toString();
                friendlyName = friendlyName.substring(0, 1).toLowerCase() + friendlyName.substring(1);
                if (friendlyName.contains("[]")) {
                    friendlyName = friendlyName.replaceAll("\\[\\]", "");
                    friendlyName += "Array";
                }
                descCounts.put(friendlyName,
                        descCounts.containsKey(friendlyName) ? descCounts.get(friendlyName) + 1 : 1);
                sb.append(friendlyName).append("Param").append(descCounts.get(friendlyName));
                if (d < m.getParams().length - 1) {
                    sb.append(", ");
                }
            }
            sb.append(")");
            array[i] = sb.toString();
            ++i;
        }
        return array;
    }

}
